name: Azure Pipelines

trigger:
- main

# استخدم نفس الـ Agent Pool حقّك
pool:
  name: myAgentPool

variables:
  # === أساسيات ===
  python.version: '3.7.6'
  azureServiceConnectionId: 'udacity-az-sp'
  projectRoot: '$(System.DefaultWorkingDirectory)'
  environmentName: 'test'

  # === Terraform backend ===
  backendResourceGroup: 'Azuredevops'
  backendStorageAccount: 'tfstatebootstrap01'
  backendContainer: 'tfstate'
  backendKey: 'test.terraform.tfstate'

  # اسم الـ App Service الثابت اللي عندك في Azure
  fixedAppName: 'myapp-AppService-131'

stages:
#--------------------------------------------#
# BUILD STAGE
#--------------------------------------------#
- stage: Build
  displayName: Build
  jobs:
  - job: BuildInfrastructure
    displayName: 'Terraform + Postman + Packaging'
    steps:
    # Install Terraform
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.13.1'

    # احصل على Storage Account Key وضعه في ARM_ACCESS_KEY (حلّ 403)
    - task: AzureCLI@2
      displayName: 'Get tfstate access key'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          # تأكّد أن حاوية tfstate موجودة
          az storage container create \
            --account-name "$(backendStorageAccount)" \
            --name "$(backendContainer)" \
            --auth-mode login >/dev/null || true

          # جيب أول مفتاح تخزين وخزّنه كمتغيّر سرّي ARM_ACCESS_KEY
          KEY=$(az storage account keys list \
                -g "$(backendResourceGroup)" \
                -n "$(backendStorageAccount)" \
                --query "[0].value" -o tsv)
          echo "##vso[task.setvariable variable=ARM_ACCESS_KEY;issecret=true]$KEY"
          echo "Backend key captured."

    # ✅ Terraform via CLI (بدون MSI)
    - bash: |
        set -e
        cd "$(System.DefaultWorkingDirectory)/terraform/environments/test"
        terraform --version
        terraform init \
          -backend-config="storage_account_name=$(backendStorageAccount)" \
          -backend-config="container_name=$(backendContainer)" \
          -backend-config="key=$(backendKey)" \
          -backend-config="resource_group_name=$(backendResourceGroup)"
      displayName: 'Terraform init (CLI)'
      env:
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    - bash: |
        set -e
        cd "$(System.DefaultWorkingDirectory)/terraform/environments/test"
        terraform validate
      displayName: 'Terraform validate (CLI)'

    - bash: |
        set -e
        cd "$(System.DefaultWorkingDirectory)/terraform/environments/test"
        terraform apply -auto-approve
      displayName: 'Terraform apply (CLI)'
      env:
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    # ---------- Postman ----------
    - task: CmdLine@2
      displayName: 'Install Newman'
      inputs:
        script: 'npm install -g newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      displayName: 'Run Data Validation Tests'
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    - task: CmdLine@2
      displayName: 'Run Regression Tests'
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    - task: PublishTestResults@2
      displayName: 'Publish Postman JUnit Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Postman Results'

    # ---------- Selenium package ----------
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests (Selenium)'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
      displayName: 'Publish UI Tests Artifact'
      artifact: 'drop-uitests'

    # ---------- FakeRestAPI package ----------
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Publish FakeRestAPI Artifact'
      artifact: 'drop-fakerestapi'

    # ---------- JMeter package ----------
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite (JMeter)'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
      displayName: 'Publish Perf Tests Artifact'
      artifact: 'drop-perftests'

#--------------------------------------------#
# DEPLOYMENT STAGE
#--------------------------------------------#
- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  jobs:
  # ---------- Deploy App Service ----------
  - deployment: FakeRestAPI
    displayName: 'Deploy FakeRestAPI Web App'
    pool:
      name: 'myAgentPool'
    environment: '$(environmentName)'
    strategy:
      runOnce:
        deploy:
          steps:
          # إعداد runtime & logging (يربط RG بالمتغيّر بدل الثابت)
          - task: AzureCLI@2
            displayName: 'Pre-config runtime & logging'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                RG='$(backendResourceGroup)'
                APP='$(fixedAppName)'
                az webapp config set -g "$RG" -n "$APP" --linux-fx-version "NODE|18-lts" || true
                az webapp config appsettings set -g "$RG" -n "$APP" --settings WEBSITE_NODE_DEFAULT_VERSION="~18" SCM_DO_BUILD_DURING_DEPLOYMENT=true WEBSITES_PORT=3000 >/dev/null
                az webapp log config -g "$RG" -n "$APP" --application-logging filesystem --level information --detailed-error-messages true --failed-request-tracing true >/dev/null || true

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App (Zip)'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appType: webApp
              appName: '$(fixedAppName)'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'

          # ---------- JMeter على Windows agent ----------
          - task: PowerShell@2
            displayName: 'Run JMeter against App Service'
            inputs:
              targetType: 'inline'
              script: |
                $perfFolder = Join-Path "$(Pipeline.Workspace)" "perftests"
                if (-Not (Test-Path $perfFolder)) { New-Item -ItemType Directory -Path $perfFolder | Out-Null }
                Set-Location $perfFolder

                $jmeterUrl = "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.1.tgz"
                $jmeterTgz = Join-Path $perfFolder "apache-jmeter-5.2.1.tgz"
                Invoke-WebRequest -Uri $jmeterUrl -OutFile $jmeterTgz
                tar -xf $jmeterTgz

                $zipFile = Join-Path "$(Pipeline.Workspace)\drop-perftests" "$(Build.BuildId)-perftests.zip"
                if (Test-Path $zipFile) {
                  Expand-Archive -Path $zipFile -DestinationPath $perfFolder -Force
                } else {
                  Write-Error "Zip file not found: $zipFile"
                  exit 1
                }

                $jmeterExe = Join-Path $perfFolder "apache-jmeter-5.2.1\bin\jmeter.bat"
                $jmx1 = Join-Path $perfFolder "Starter.jmx"
                $jmx2 = Join-Path $perfFolder "PerformanceTestSuite.jmx"
                $jmxFile = (Test-Path $jmx1) ? $jmx1 : $jmx2
                if (-Not (Test-Path $jmxFile)) { Write-Error "JMX not found"; exit 1 }

                $logFile = Join-Path $perfFolder "jmeter.log"
                & $jmeterExe -n -t $jmxFile -j $logFile -f
                Write-Host "=== JMeter Log (tail) ==="
                Get-Content $logFile -Tail 200

  # ---------- Selenium على Windows VM ----------
  - deployment: VMDeploy
    displayName: 'Selenium Tests'
    environment:
      name: '$(environmentName)'
    pool:
      name: 'myAgentPool'
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests

          - task: PowerShell@2
            displayName: 'Run Selenium Tests on Windows'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Installing dependencies..."
                pip install selenium

                Write-Host "Preparing test files..."
                $testFolder = "$(Pipeline.Workspace)\uitests"
                if (-Not (Test-Path $testFolder)) { New-Item -ItemType Directory -Path $testFolder | Out-Null }
                Expand-Archive "$(Pipeline.Workspace)\drop-uitests\$(Build.BuildId)-uitests.zip" -DestinationPath $testFolder -Force

                Write-Host "Checking ChromeDriver..."
                $chromeDriverPath = "C:\Users\Public\chromedriver\chromedriver.exe"
                if (-Not (Test-Path $chromeDriverPath)) {
                    $latest = Invoke-RestMethod "https://chromedriver.storage.googleapis.com/LATEST_RELEASE"
                    $chromeDriverZip = "$testFolder\chromedriver_win32.zip"
                    Invoke-WebRequest "https://chromedriver.storage.googleapis.com/$latest/chromedriver_win32.zip" -OutFile $chromeDriverZip
                    New-Item -ItemType Directory -Path (Split-Path $chromeDriverPath) -Force | Out-Null
                    Expand-Archive $chromeDriverZip -DestinationPath (Split-Path $chromeDriverPath) -Force
                }
                $chromeDriverDir = Split-Path $chromeDriverPath
                $env:PATH += ";$chromeDriverDir;$testFolder"

                Write-Host "Running Selenium tests..."
                python "$testFolder\add_remove_from_cart.py" | Tee-Object -FilePath "$testFolder\selenium.log"

                Write-Host "Completed Selenium Tests. Check selenium.log for results."
